{:paths ["src"]
 :version "0.1.0"
 
 ; :pods {org.babashka/postgresql {:version "0.1.0"}
 ;        org.babashka/hsqldb {:version "0.1.0"}
 ;        epiccastle/bbssh {:version "0.5.0"}
 ;        borkdude/clj-kondo {:version "2025.06.05"}}
 
 :deps {org.clojure/clojure {:mvn/version "1.11.1"}
        
        ;; HTTP Server
        http-kit/http-kit {:mvn/version "2.7.0"}
        
        ;; Routing library for Babashka
        org.clojars.askonomm/ruuter {:mvn/version "1.3.4"}
        
        ;; JSON handling (Babashka built-in)
        ; cheshire/cheshire {:mvn/version "5.11.0"}
        
        ;; Database connectivity
        com.github.seancorfield/next.jdbc {:mvn/version "1.3.894"}
        org.postgresql/postgresql {:mvn/version "42.6.0"}
        com.mysql/mysql-connector-j {:mvn/version "8.1.0"}
        org.xerial/sqlite-jdbc {:mvn/version "3.42.0.0"}
        com.microsoft.sqlserver/mssql-jdbc {:mvn/version "12.2.0.jre8"}
        org.hsqldb/hsqldb {:mvn/version "2.7.2"}
        
        ;; Utilities
        clj-http/clj-http {:mvn/version "3.12.3"}
        org.clojure/data.json {:mvn/version "2.4.0"}
        hiccup/hiccup {:mvn/version "1.0.5"}}
 
 :tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])
  
  dev {:doc "Start development server with hot reload"
       :task (do
               (println "ðŸš€ Starting BBPad development server...")
               (shell "bb src/bbpad/main.clj --dev"))}
  
  build {:doc "Build React UI and create executable"
         :task (do
                 (println "ðŸ”¨ Building BBPad...")
                 (when (fs/exists? "bbpad-ui/package.json")
                   (shell "cd bbpad-ui && npm run build"))
                 (shell "bb build/create-executable.clj"))}
  
  test {:doc "Run all tests"
        :task (do
                (println "ðŸ§ª Running tests...")
                (shell "bb test/unit-tests.clj"))}
  
  test:unit {:doc "Run unit tests only"
             :task (shell "bb test/unit-tests.clj")}
  
  test:integration {:doc "Run integration tests"
                    :task (shell "bb test/integration-tests.clj")}
  
  test:all {:doc "Run all tests including E2E"
            :task (do
                    (run 'test)
                    (when (fs/exists? "package.json")
                      (shell "npm run test:e2e")))}
  
  clean {:doc "Clean build artifacts"
         :task (do
                 (println "ðŸ§¹ Cleaning build artifacts...")
                 (fs/delete-tree "target" {:force true})
                 (when (fs/exists? "bbpad-ui/dist")
                   (fs/delete-tree "bbpad-ui/dist" {:force true}))
                 (when (fs/exists? "package.json")
                   (shell "npm run clean")))}
  
  release {:doc "Create release build for all platforms"
           :task (do
                   (println "ðŸ“¦ Creating release builds...")
                   (run 'clean)
                   (run 'test:all)
                   (run 'build)
                   (shell "bb build/package-all-platforms.clj"))}
  
  install {:doc "Install BBPad to local system"
           :task (shell "bb build/install.clj")}
  
  format {:doc "Format code using cljfmt"
          :task (shell "bb format/format-code.clj")}
  
  lint {:doc "Lint code using clj-kondo"
        :task (shell "clj-kondo --lint src test --config .clj-kondo/config.edn")}
  
  version {:doc "Show current version information"
           :override-builtin true
           :task (shell "bb -e '(require '[bbpad.core.version :as v]) (v/dev-version-report)'")}
  
  version:check {:doc "Check version consistency across files"
                 :task (shell "bb -e '(require '[bbpad.core.version :as v]) (v/check-version-consistency)'")}
  
  version:bump-patch {:doc "Bump patch version (x.x.X)"
                      :task (shell "bb -e '(require '[bbpad.core.version :as v]) (v/bump-version! :patch)'")}
  
  version:bump-minor {:doc "Bump minor version (x.X.0)"
                      :task (shell "bb -e '(require '[bbpad.core.version :as v]) (v/bump-version! :minor)'")}
  
  version:bump-major {:doc "Bump major version (X.0.0)"
                      :task (shell "bb -e '(require '[bbpad.core.version :as v]) (v/bump-version! :major)'")}
  
  package:macos {:doc "Build macOS app bundle and DMG installer"
                 :task (shell "bb build/package-macos.clj")}
  
  package:windows {:doc "Build Windows executable and installer"
                   :task (shell "bb build/package-windows.clj")}
  
  package:linux {:doc "Build Linux AppImage"
                 :task (shell "bb build/package-linux.clj")}
  
  package:all {:doc "Build packages for all platforms"
               :task (do
                       (run 'package:macos)
                       (run 'package:windows)
                       (run 'package:linux))}

  changelog:init {:doc "Initialize CHANGELOG.md with current version"
                  :task (shell "bb -e '(require '[bbpad.core.changelog :as c]) (c/init-changelog!)'")}

  changelog:add {:doc "Add changelog entry (usage: bb changelog:add <version> <item>)"
                 :task (shell "bb src/bbpad/core/changelog.clj add")}

  changelog:notes {:doc "Generate release notes for current version"
                   :task (shell "bb -e '(require '[bbpad.core.changelog :as c] '[bbpad.core.version :as v]) (c/generate-release-notes (v/current-version))'")}

  changelog:summary {:doc "Show summary of recent releases"
                     :task (shell "bb -e '(require '[bbpad.core.changelog :as c]) (clojure.pprint/pprint (c/get-release-summary))'")}

  release:patch {:doc "Release new patch version (x.x.X)"
                 :task (shell "bb -e '(require '[bbpad.core.changelog :as c]) (c/release-workflow! :patch)'")}

  release:minor {:doc "Release new minor version (x.X.0)"
                 :task (shell "bb -e '(require '[bbpad.core.changelog :as c]) (c/release-workflow! :minor)'")}

  release:major {:doc "Release new major version (X.0.0)"
                 :task (shell "bb -e '(require '[bbpad.core.changelog :as c]) (c/release-workflow! :major)'")}}}