#!/usr/bin/env bb

(ns build.package-windows
  "Build Windows executable and installer for BBPad"
  (:require [babashka.fs :as fs]
            [babashka.process :refer [shell]]
            [clojure.string :as str]
            [bbpad.core.version :as version]))

(def app-name "BBPad")
(def build-dir "build")
(def windows-dir (str build-dir "/windows"))
(def app-dir (str windows-dir "/" app-name))
(def installer-name (str app-name "-" (version/current-version) "-Windows.exe"))

(defn clean-build-dir!
  "Clean the build directory"
  []
  (println "üßπ Cleaning Windows build directory...")
  (when (fs/exists? app-dir)
    (fs/delete-tree app-dir))
  (when (fs/exists? (str build-dir "/" installer-name))
    (fs/delete (str build-dir "/" installer-name))))

(defn build-frontend!
  "Build the React frontend for production"
  []
  (println "üî® Building React frontend...")
  (shell "cd bbpad-ui && npm run build"))

(defn create-app-structure!
  "Create the Windows app structure"
  []
  (println "üì¶ Creating Windows app structure...")
  
  ;; Create app directories
  (fs/create-dirs (str app-dir "/bin"))
  (fs/create-dirs (str app-dir "/lib"))
  (fs/create-dirs (str app-dir "/resources"))
  
  ;; Copy source code
  (fs/copy-tree "src" (str app-dir "/src"))
  
  ;; Copy built frontend
  (when (fs/exists? "bbpad-ui/dist")
    (fs/copy-tree "bbpad-ui/dist" (str app-dir "/public")))
  
  ;; Copy configuration files
  (fs/copy "bb.edn" (str app-dir "/bb.edn"))
  (fs/copy "deps.edn" (str app-dir "/deps.edn"))
  
  ;; Copy any resources
  (when (fs/exists? "resources")
    (fs/copy-tree "resources" (str app-dir "/resources")))
  
  ;; Create launcher script
  (create-launcher-script!))

(defn create-launcher-script!
  "Create Windows batch launcher script"
  []
  (println "üìù Creating launcher script...")
  (let [bat-content (str "@echo off\n"
                        "REM BBPad Windows Launcher\n"
                        "setlocal\n"
                        "\n"
                        "REM Get the directory containing this script\n"
                        "set SCRIPT_DIR=%~dp0\n"
                        "set APP_DIR=%SCRIPT_DIR%\n"
                        "\n"
                        "REM Set environment variables\n"
                        "set BBPAD_APP_DIR=%APP_DIR%\n"
                        "set BBPAD_BUNDLED=true\n"
                        "\n"
                        "REM Launch babashka with the main script\n"
                        "cd /d \"%APP_DIR%\"\n"
                        "bb src\\bbpad\\main.clj %*\n")
        bat-path (str app-dir "/" app-name ".bat")]
    (spit bat-path bat-content)))

(defn download-babashka!
  "Download Babashka for Windows"
  []
  (println "‚¨áÔ∏è  Downloading Babashka for Windows...")
  (try
    ;; This would download and extract Babashka binary
    ;; For now, just create a placeholder
    (let [bb-exe (str app-dir "/bin/bb.exe")]
      (spit bb-exe "placeholder-babashka-executable")
      (println "   Babashka downloaded to:" bb-exe))
    (catch Exception e
      (println "‚ö†Ô∏è  Warning: Could not download Babashka:" (.getMessage e))
      (println "   Manual Babashka installation required"))))

(defn create-nsis-script!
  "Create NSIS installer script"
  []
  (println "üìú Creating NSIS installer script...")
  (let [nsis-content (str "# BBPad Windows Installer\n"
                         "# Generated by build/package-windows.clj\n"
                         "\n"
                         "!define APP_NAME \"" app-name "\"\n"
                         "!define APP_VERSION \"" (version/current-version) "\"\n"
                         "!define APP_PUBLISHER \"Kay Bosompem\"\n"
                         "!define APP_URL \"https://github.com/kbosompem/bbpad\"\n"
                         "!define APP_EXE \"" app-name ".bat\"\n"
                         "\n"
                         "Name \"${APP_NAME} ${APP_VERSION}\"\n"
                         "OutFile \"" installer-name "\"\n"
                         "InstallDir \"$PROGRAMFILES\\${APP_NAME}\"\n"
                         "InstallDirRegKey HKLM \"Software\\${APP_NAME}\" \"Install_Dir\"\n"
                         "\n"
                         "RequestExecutionLevel admin\n"
                         "\n"
                         "Page components\n"
                         "Page directory\n"
                         "Page instfiles\n"
                         "\n"
                         "UninstPage uninstConfirm\n"
                         "UninstPage instfiles\n"
                         "\n"
                         "Section \"BBPad (required)\"\n"
                         "  SectionIn RO\n"
                         "  \n"
                         "  SetOutPath $INSTDIR\n"
                         "  \n"
                         "  File /r \"" app-dir "\\*.*\"\n"
                         "  \n"
                         "  WriteRegStr HKLM SOFTWARE\\${APP_NAME} \"Install_Dir\" \"$INSTDIR\"\n"
                         "  \n"
                         "  WriteRegStr HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${APP_NAME}\" \"DisplayName\" \"${APP_NAME}\"\n"
                         "  WriteRegStr HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${APP_NAME}\" \"UninstallString\" '\"$INSTDIR\\uninstall.exe\"'\n"
                         "  WriteRegDWORD HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${APP_NAME}\" \"NoModify\" 1\n"
                         "  WriteRegDWORD HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${APP_NAME}\" \"NoRepair\" 1\n"
                         "  WriteUninstaller \"uninstall.exe\"\n"
                         "\n"
                         "SectionEnd\n"
                         "\n"
                         "Section \"Start Menu Shortcuts\"\n"
                         "  CreateDirectory \"$SMPROGRAMS\\${APP_NAME}\"\n"
                         "  CreateShortcut \"$SMPROGRAMS\\${APP_NAME}\\${APP_NAME}.lnk\" \"$INSTDIR\\${APP_EXE}\" \"\" \"$INSTDIR\\${APP_EXE}\" 0\n"
                         "  CreateShortcut \"$SMPROGRAMS\\${APP_NAME}\\Uninstall.lnk\" \"$INSTDIR\\uninstall.exe\" \"\" \"$INSTDIR\\uninstall.exe\" 0\n"
                         "SectionEnd\n"
                         "\n"
                         "Section \"Desktop Shortcut\"\n"
                         "  CreateShortcut \"$DESKTOP\\${APP_NAME}.lnk\" \"$INSTDIR\\${APP_EXE}\" \"\" \"$INSTDIR\\${APP_EXE}\" 0\n"
                         "SectionEnd\n"
                         "\n"
                         "Section \"Uninstall\"\n"
                         "  DeleteRegKey HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${APP_NAME}\"\n"
                         "  DeleteRegKey HKLM SOFTWARE\\${APP_NAME}\n"
                         "  \n"
                         "  Delete \"$SMPROGRAMS\\${APP_NAME}\\*.*\"\n"
                         "  Delete \"$DESKTOP\\${APP_NAME}.lnk\"\n"
                         "  \n"
                         "  RMDir /r \"$SMPROGRAMS\\${APP_NAME}\"\n"
                         "  RMDir /r \"$INSTDIR\"\n"
                         "\n"
                         "SectionEnd\n")
        nsis-path (str build-dir "/installer.nsi")]
    (spit nsis-path nsis-content)
    nsis-path))

(defn create-installer!
  "Create Windows installer using NSIS"
  []
  (println "üèóÔ∏è  Creating Windows installer...")
  (try
    (let [nsis-script (create-nsis-script!)]
      (shell (str "makensis " nsis-script))
      (println "‚úÖ Windows installer created:" installer-name))
    (catch Exception e
      (println "‚ö†Ô∏è  Warning: Could not create installer:" (.getMessage e))
      (println "   NSIS may not be installed or available")
      ;; Create a simple ZIP archive as fallback
      (create-zip-package!))))

(defn create-zip-package!
  "Create ZIP package as fallback"
  []
  (println "üì¶ Creating ZIP package...")
  (try
    (let [zip-name (str app-name "-" (version/current-version) "-Windows.zip")]
      (shell (str "cd " build-dir " && zip -r " zip-name " " (fs/file-name app-dir)))
      (println "‚úÖ ZIP package created:" zip-name))
    (catch Exception e
      (println "‚ùå Error creating ZIP package:" (.getMessage e)))))

(defn verify-build!
  "Verify the Windows build was successful"
  []
  (println "üîç Verifying Windows build...")
  (let [app-exists? (fs/exists? app-dir)
        launcher-exists? (fs/exists? (str app-dir "/" app-name ".bat"))
        installer-exists? (fs/exists? (str build-dir "/" installer-name))
        zip-exists? (fs/exists? (str build-dir "/" app-name "-" (version/current-version) "-Windows.zip"))]
    
    (println (str "  App directory: " (if app-exists? "‚úÖ" "‚ùå")))
    (println (str "  Launcher script: " (if launcher-exists? "‚úÖ" "‚ùå")))
    (println (str "  Installer: " (if installer-exists? "‚úÖ" "‚ùå")))
    (println (str "  ZIP package: " (if zip-exists? "‚úÖ" "‚ùå")))
    
    (when-not (and app-exists? launcher-exists?)
      (throw (ex-info "Windows build verification failed" {:app app-exists? :launcher launcher-exists?})))
    
    (when (or installer-exists? zip-exists?)
      (let [package-file (if installer-exists? 
                          (str build-dir "/" installer-name)
                          (str build-dir "/" app-name "-" (version/current-version) "-Windows.zip"))
            package-size (fs/size package-file)]
        (println (str "  Package size: " (Math/round (/ package-size 1024.0 1024.0)) " MB"))))
    
    (println "‚úÖ Windows build verification successful!")))

(defn package-windows!
  "Complete Windows packaging workflow"
  []
  (try
    (println "üöÄ Starting Windows packaging...")
    
    (clean-build-dir!)
    (build-frontend!)
    (create-app-structure!)
    (download-babashka!)
    (create-installer!)
    (verify-build!)
    
    (println "üéâ Windows packaging complete!")
    (println (str "   App directory: " app-dir))
    (println (str "   Installer: " build-dir "/" installer-name))
    (println)
    (println "To test the application:")
    (println (str "   cd " app-dir " && " app-name ".bat"))
    
    {:success true
     :app-dir app-dir
     :installer-file (str build-dir "/" installer-name)}
    
    (catch Exception e
      (println (str "‚ùå Error during Windows packaging: " (.getMessage e)))
      (println "Stack trace:")
      (.printStackTrace e)
      {:success false :error (.getMessage e)})))

;; Main entry point
(when (= *file* (System/getProperty "babashka.file"))
  (package-windows!))